ll
cd ~/.scripts/bin/
ll
rm dmenu_launch_copy.py 
cd ~/.local/bin/
ll
cd
tp
htop
vim .config/qtile/
clear
dotfiles status
dotfiles diff
dotfiles add .config/crontab
ll .config/
rm .config/nvim.tar.gz 
crontab -l
crontab > .config/crontag
crontab < .config/crontag
crontab -l < .config/crontag
ll .config/
mv .config/crontag .config/crontab
dotfiles add .config/crontab 
dotfiles status
ll
ll | lc
ll | count
ll -c
ll | c
ll | count
ll | ln -c
neofetch 
foocli 
dmenu -l
dmenu_run -l
dmenu_run -l 20
exo-open 
dmenu
dmenu --help
man exo-open 
cd /var/lib/flatpak/exports/share/applications/
./org.signal.Signal.desktop 
exo-open org.signal.Signal.desktop 
gtk-launch org.signal.Signal.desktop 
rome-wallp 
rome-wallp set
ll ~
ll ~/.local/bin/pylint 
foocli 
rome-wallp set
gtk-launch com.teamspeak.TeamSpeak.desktop 
gtk-launch /var/lib/flatpak/exports/share/applications/
gtk-launch /var/lib/flatpak/exports/share/applications/com.teamspeak.TeamSpeak.desktop 
gtk-launch "/var/lib/flatpak/exports/share/applications/com.teamspeak.TeamSpeak.desktop"
gtk-launch "/var/lib/flatpak/exports/share/applications/com.teamspeak.TeamSpeak
gtk-launch "/var/lib/flatpak/exports/share/applications/com.teamspeak.TeamSpeak"
gtk-launch "/var/lib/flatpak/exports/share/applications/com.teamspeak.TeamSpeak.desktop" 
gtk-launch com.teamspeak.TeamSpeak.desktop /var/lib/flatpak/exports/share/applications/
gtk-launch com.teamspeak.TeamSpeak.desktop /var/lib/flatpak/exports/share/applications
gtk-launch com.teamspeak.TeamSpeak.desktop /var/lib/flatpak/exports/share/applications/
gtk-launch com.teamspeak.TeamSpeak.desktop /var/lib/flatpak/exports/share/applications
gtk-launch com.teamspeak.TeamSpeak.desktop "/var/lib/flatpak/exports/share/applications"
man gtk-launch 
gtk-launch com.teamspeak.TeamSpeak.desktop ${PWD}
gtk-launch com.teamspeak.TeamSpeak.desktop 
cd
vim .config/qtile/
kill -9 669025
ps  | grep steam
ps | grep steam
ps -e | grep steam
ps -e | grep steam | kill -9
ps -e | grep steam | awk
ps -e | grep steam | awk '{ print $1 }'
ps -e | grep steam | awk '{ print $1 }' | kill -9
ps -e | grep steam | awk '{ print $1 }' | kill
kill -9 $(ps -e | grep steam | awk '{ print $1 }')
ps -e | grep steam | awk '{ print $1 }'
mullvad-gui
ll /usr/share/applications/
ll /usr/share/applications/ | grep mullvad
cd /usr/share/applications
cat kikiplugins.desktop
cat kipiplugins.desktop 
dnf remove kipiplugins
sudo dnf remove kipiplugins
rm kipiplugins.desktop 
sudo rm kipiplugins.desktop 
dotfiles
dotfiles status
cd
dotfiles add .scripts/
dotfiles status
vim .bashrc 
ll
cd .config/
rome-wallp set
ll
ls
rome-wallp set
cd
vim .bashrc 
ll
cd Documents/Projects/
cd
htop 
gnome-tweaks 
neofetch 
ll
sudo dnf remove lxappearance
gnome-control-center 
gnome-tweaks 
gnome-control-center 
htop
cd /usr/share/applications/
gtk-launch mullvad-vpn.desktop 
gnome-control-center 
gnome-control-center &
exit
htop
exit
ll
cd config
cd .config/
exit
st
cd .config/
ell
cd ..
ll
exit
gnome-tweaks 
htop
exit
gnome-control-center 
gnome-tweaks 
htop
exit
htop
compton
exit
ps -e | picom
ps -e | grep picom
kill 815860
compton
compton&
sudo dnf remove picom-8.2-1.fc32.x86_64
vim .config/qtile/config.py 
vim .config/qtile/autostart.sh 
ps -e | grep picom
ps -e | grep compton
htop
exit
shutdown now
flatpak install redshift
sudo dnf install redshift
redshift 
sudo dnf install redshift-gtk
sudo dnf install nightshift
sudo dnf install redshift-gtk
redshift-gtk &
redshift-gtk 
redshift --help
redshift -h
cd /usr/share/applications/
gtk-launch redshift.desktop 
gtk-launch redshift-gtk.desktop 
gnome-control-center 
exit
compton
exit
ll /usr/share/gnome-control-center/keybindings/
ll .scripts/bin/rome-wallp 
cat .scripts/bin/rome-wallp 
gsettings get org.gnome.desktop.wm.preferences 
gsettings get org.gnome.desktop.wm.keybindings 
gsettings get org.gnome.desktop.lockdown 
gsettings get org.gnome.desktop.lockdown htop
top
vim .scripts/bin/rome-wallp 
sudo dnf install picom
compton
pico&
picom&
vim .config/qtile/
rome-wallp set
ll
cat .fehbg 
vim .bash_aliases 
rome-wallp set
ll
ll .config/
ll
rome-wallp set
ll
ll .config/
cat .config/fehbg 
vim .config/qtile/
.config/qtile/autostart.sh 
feh --bg-fill Pictures/wallpapers/cityscapes/0200.jpg 
feh --bg-fill Pictures/wallpapers/cityscapes/0072.jpg 
.config/qtile/autostart.sh 
sudo dnf install lightdm-webkit2-greeter
cd /etc/yum.repos.d/
sudo rm _copr\:copr.fedorainfracloud.org\:antergos\:lightdm-webkit2-greeter.repo 
cd
clear
dm-tool switch-to-greeter 
dnf seach greeter
dnf search greeter
sudo dnf install slick-greeter
lightdm-settings 
sudo lightdm-settings 
sudo systemctl disable gdm.service 
sudo system enable lightdm
sudo systemctl enable lightdm.service 
vim /etc/lightdm/lightdm-gtk-greeter.conf 
lightdm-settings 
sudo lightdm-settings 
reboot now
shutdown -r
shutdown -r now
sudo dnf install lightdm-lock
sudo dnf install lightdm-locker
sudo dnf install light-lock
sudo dnf install light-locker
light-locker-command -l
light-locker
light-locker -h
light-locker --display=:1
light-locker --display=:0
light-locker --debug
sudo dnf remove light-locker-1.9.0-3.fc32.x86_64 
sudo dnf install light-locker
light-locker-command -l
ll .config/
ll .config/autostart/
ps -e | redshift
ps -e | grep redshift
clear
ll
cat .xsession-errors 
rm .xsession-errors 
ll
cat .fehbg 
rm .fehbg 
ll
rome-wallp set
ll
vim .config/fehbg 
rome-wallp set
ll
vim .config/qtile/autostart.sh 
vim .config/qtile/config.py 
ll
dotfiles
dotfiles status
vim .scripts/bin/dmenu_launch.py 
light-locker&
ll
light-locker-command -l
htop
gnome-control-center 
gsettings
gsettings --version
gsettings --help
light-locker-command -l
xdg-screensaver 
xdg-screensaver lock
xdg-screensaver activate
dconf list
dconf list org
systemctl status lightdm.service 
light-locker-command -l
vim .config/qtile/autostart.sh 
light-locker-command -l
vim .config/qtile/autostart.sh 
ps -e | grep light
ps -e | grep light-locker
light-locker
light-locker --debug
top
cd .config/qtile/
cd ~/.scripts/bin/
python dmenu_launch.py 
exit
iw
iwlist 
iwconfig 
iwpriv wlp59s0 
clear
exit
light-locker-command -l
ll /usr/share/applications/
foocli 
top
gnome-keyring
gnome-keyring import
cd Documents/Projects/
cd dmenu/
git pull source
git pull source master
ll
vim config.h 
make
./dmenu_run 
vim config.h 
patch --merge -i ../dmenu-caseinsensitive-20200523-db6093f.diff
vim dmenu.c
make
vim dmenu.c
make
./dmenu_run 
vim dmenu.c
make clean
make 
./dmenu_run 
dmenu_run 
dmenu_run -i
git reset --hard
git status
patch --merge -i ../dmenu-caseinsensitive-20200523-db6093f.diff
vim dmenu.c
sudo make clean install
patch --merge -i ../dmenu-xresources-4.9.diff 
make clean
git status
vim .gitignore 
git status
sudo make clean install
git status
vim config.h 
git add .
git status
git restore --staged dmenu
git status
git restore dmenu
git status
git add .
git status
git log
git push -m "patched case-insensitive and xresources"
git commit -m "patched case-insensitive and xresources"
git push
clear
git log
cd
cd Documents/Projects/nand2tetris/assembler/pyssembler/
ll
vim assembler.py 
cd ..
ll
cd ..
vim assembler_test.py 
dotfiles status
clear
ll
vim .config/qtile/
ll
dotfiles status
dotfiles add .bashrc .config/qtile/ .scripts/
dotfiles status
dots files restore --stage .config/qtile/__pycache__/
dotfiles restore --stage .config/qtile/__pycache__/
dotfiles status
dotfiles log
dotfiles add -m "more qtile customisations, dmenu launcher for flatpaks and other configs"
dotfiles commit -m "more qtile customisations, dmenu launcher for flatpaks and other configs"
dotfiles stauts
dotfiles status
dotfiles push
ssh-add .ssh/mournfulfrog_rsa
dotfiles push
clear
vim .scripts/bin/dmenu_launch.py 
cd .scripts/bin/
vim dmenu_launch.py 
exit
cd .scripts/bin/
vim dmenu_launch.py 
cd
vim .config/qtile/config.py 
dotfiles
dotfiles status
dotfiles add .config/qtile/config.py 
dotfiles add .scripts/bin/dmenu_launch.py 
dotfiles status
dotfiles commit --amend
dotfiles push --force-with-lease
foocli 
exit
sudo dnf install st
st
exit
cd /usr/local/bin/
rm -r st
sudo rm -r st
exit
st
cd Documents/Projects/st/
ll
sudo make clean install
exit
cd .config/
whereis st
ll
clear
ll
clear
rome-wallp set
ll
rome-wallp set
ll
rome-wallp set
ll
rome-wallp set
ll
exit
cd Documents/Projects/st/
git log
ll
ll .gitignore 
git add .gitignore 
vim .gitignore 
ll
git status 
git add .gitignore 
sudo dnf remove st
exit
cd Documents/Projects/st/
exit
cd ..
ll
cd 
cd Documents/Projects/
ll
cd st/
sudo make clean install
exit
ll
cd .config/
ll
exit
ll
clear
rome-wallp 
rome-wallp set
ll
rome-wallp set
ll
ll
cd ..
cd jb/
ll
rome-wallp 
rome-wallp set
ll
:Q
exit
cd .config/qtile/
python config.py 
sudo dnf remove Alacritty
sudo dnf remove alacritty
ll
clear
vim .config/qtile/screens.py 
rome-wallp set
nitrogen
exit
xit
exit
vim .config/qtile/config.py 
vim .config/qtile/layouts.py 
exit
cd Documents/Projects/st/
cat config.h 
vim config.h
ll
ll ..
cd
exit
rome-wallp set
nitrogen 
rome-wallp set
nitrogen 
rome-wallp set
nitrogen 
rome-wallp set
vim .config/qtile/config.py 
vim .config/qtile/layouts.py 
vim .config/qtile/config.py 
vim .config/qtile/screens.py 
redshift
ping suckless.org
redshift
redshift --help
redshift -h
redshift -o
redshift -t
redshift -b 0.1
exit
redshift-gtk 
shutdown now
vim .config/qtile/layouts.py 
dotfiles status
vim .config/qtile/config.py 
vim .config/qtile/screens.py 
ssh pointy@pointyradiance 
ssh-add ~/.ssh/pointyradiance
ssh pointy@pointyradiance 
clear
vim .config/qtile/
:q!
cd .config/qtile/
wget https://github.com/arcolinux/arcolinux-qtile/blob/master/etc/skel/.config/qtile/arcobattery.py
ll
ranger 
rm arcobattery.py 
nm-applet 
wget https://raw.githubusercontent.com/arcolinux/arcolinux-qtile/master/etc/skel/.config/qtile/arcobattery.py
ll
cat arcobattery.py 
python config
python config.py 
cd .config/qtile/
ll
clear
thunar
vim screens.py 
ll
vim config.py 
vim screens.py 
vim .
pkill -u jb
exit
python config.py 
ll
pkill -u jb
ll
cd .config/qtile/
ll
python config.py 
vim screens.py 
exi
exit
pkill -u
pkill -u jb
exit
python config.py 
cd .config/qtile/
python arcobattery.py 
python config.py 
import arcobattery.py 
python
vim .
cd
rome-wallp set
ll
clear
foocli 
dotfiles status
lf
lf-git
foocli 
exit
ll
hello
clear
ll
vim xresources 
echo $XDG_SEAT
echo $XDG_SEAT_PATJ
vim xresources 
xrdb 
xrdb xresources 
exit
vim xresources 
exit
dotfiles
dotfiles status
cd Documents/Projects/
ll
cd st
git status
git log
ll ..
patch --merge -i ../st-xresources-20200604-9ba7ecf.diff 
make
vim x.c
vim config.h
make
sudo make clean install
ll
cd
ll
vim xresources
xrdb xresources 
nm-applet 
man nm-applet 
whereis nm-applet
cd /usr/bin/nm-applet
cd /usr/bin
gtk-launch nm-applet 
cd
vim xresources 
st
cd Documents/Projects/st/
vim config.h
sudo make clean install
ll
vim config.h 
ll
vim config.h 
ll
clear
vim config.h 
sudo make clean install
ll
clear
ll
exit
ll
ll
vim xresources 
xrdb xresources 
ll
vim xresources 
xrdb xresources 
neofetch 
xrdb .config/x11/xresources 
neofetch 
ll
vim 
ll
neofetch 
neofetch 
ll
fc-list | In
fc-list | grep in
fc-list | grep inconso
clear
ll
vim xresources 
ll
xz
xev
ll
ll .local/share/
ll .local/share/xorg/
cat .local/share/xorg/Xorg.1.log
xwininfo 
neofetch 
cp .config/gtk-3.0/settings.ini .config/gtk-2.0/gtkrc-20.ini
rm .config/gtk-2.0/gtkrc-20.ini 
export GTK2_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/settings.ini"
neofetch 
vim .bashrc 
ll
clear
ll
mutter 
ll
clear
ll
dnf search noto
fc-list | grep noto
fc-list | grep liberation
fc-list | grep bio
fc-list | grep bioli
fc-list | grep Liber

fc-list | grep incon
ansible
ll
ll .config/
ll
ll .ansible/
ll .ansible/cp/
ll .ansible/tmp/ansible-local-
ll .ansible/tmp/
rm -r .ansible/
ansible
ll
ll .ansible/
rm -r .ansible/
ll
ansible
ll
rm -r .ansible/
vim .bashrc 
. .bashrc 
ll
ansible
ll
cat .wget-hsts 
vim .bashrc 
mkdir .config/wget
vim .config/wget/wgetrc
source .bashrc
ll
wget gikb.moshipotato.info
cat .wget-hsts 
cat .cache/wget-hsts 
ll
rm \:wqa 
ll
cp .wget-hsts .cache/wget-hsts 
ll
mv .wget-hsts .cache/wget-hsts 
ll
rm index.html 
ll
cat .python_history 
rm .python_history 
ll
rm -r .ansible/
mkdir .config/x11
mv xresources .config/x11/
ll
ll fltk
ll .fltk/
ll .fltk/fltk.org/
cat .fltk/fltk.org/fltk.prefs 
rm -r .fltk/
lll
ll
cat .xsession-errors
cat .esd_auth 
ll
ll .software/
rm .software/dmenu_launch.py 
cd .config/ansible/
ll
wget https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg
ll
vim ansible.cfg 
ll
cd 
ll
ll .cache/
ansible
ll
ll .cache/
ll .cache/ansible/
ll
cd ..
cd jb/
ll
ll .ansible/
rm -r .ansible/
vim .config/ansible/ansible.cfg 
ll
joplin 
ll
.software/joplin/Joplin.AppImage
l
loginctl show-session 7 -p Type
loginctl 
loginctl show-session 22 -p Type
ll
dotfiles status
ll .bashrc 
cat .bashrc 
mv .config/gtk-2.0/settings.ini .config/gtk-2.0/gtkrc-2.0
neofetch
ll .config/
dotfiles add .config/x11/
dotfiles add .config/wget/
dotfiles add .config/ansible/
dotfiles add .config/tmux/
dotfiles add .config/newsboat/
dotfiles status
dotfiles restore --staged .config/newsboat/
dotfiles status
dotfiles add .config/newsboat/config 
dotfiles
dotfiles status
vim .bashrc 
dotfiles status
ll
cat .bashrc 
ll
cat .bash_aliases 
ll
clear
mkdir .config/fontconfig/fonts.conf
cd .config/fontconfig/
ll
rm -r fonts.conf/
vim fonts.conf
vim fonts.conf 
cd ~/Documents/Projects/st/
vim config.h 
sudo make clean install
ll
vim config.h 
sudo make clean install
echo $TERM
ll
clear
cd
vim .config/x11/xresources 
xrdb .config/x11/xresources 
neofetch 
ll
vim
cd Documents/Projects/
ll
clear
ll
dotfiles status
xrandr 
xrandr --help
set -o vi
ll
clear
exit
ll
vim .bashrc 
. .bashrc 
vim .bashrc 
. .bashrc 
clear
vim .bashrc 
. .bashrc 
echo $TERM
exit
ll
cd .config/
echo $TERM
vim .bashrc 
shutdown now
ll
cd .config/
exit
echo $TERM
ll
cd .config/
echo $TERM
keepassxc-cli 
ssh-add .ssh/pointyradiance
ssh pointy@pointyradiance 
exit
top
ll
dotfiles status
ll
foocli 
ll
dotfiles
dotfiles status
cd Pictures/wallpapers/
git status
git add .
git commit -m "new wallpapers"
git push
gnome-keyring
gnome-keyring-3 
gnome-keyring-daemon 
gnome-keyring-3 
git push
ssh-agent start
ssh-agent 
git push
ssh-add ~/.ssh/mournfulfrog_rsa
git push
cd
ll
cd .config/
cd
vim .config/qtile/
dotfiles status
dotfiles add .config/qtile/
dotfiles status
dotfiles restore --stage .config/qtile/__pycache__/
dotfiles status
vim .bashrc 
source .bashrc 
vim .bash
vim .bashrc 
dotfiles
dotfiles status
cd .scripts/
ll
cd ..
top
gpg --keyserver-options auto-key-retrieve --very 
cd Downloads/
ll
gpg --keyserver-options auto-key-retrieve --verify archlinux-2020.11.01-x86_64.iso 
cp ~/shared/whonix/archlinux-2020.11.01-x86_64.iso.sig .
sudo cp ~/shared/whonix/archlinux-2020.11.01-x86_64.iso.sig .
ll
chown jb:jb archlinux-2020.11.01-x86_64.iso
sudo chown jb:jb archlinux-2020.11.01-x86_64.iso
ll
sudo chown jb:jb archlinux-2020.11.01-x86_64.iso.sig 
ll
gpg --keyserver-options auto-key-retrieve --verify archlinux-2020.11.01-x86_64.iso 
gpg --keyserver-options auto-key-retrieve --verify archlinux-2020.11.01-x86_64.iso.sig 
md5sum archlinux-2020.11.01-x86_64.iso
sha1sum archlinux-2020.11.01-x86_64.iso
gparted
sudo gparted
vim /etc/mke2fs.conf 
ll
cd
ll
sudo ll /etc/
sudo l /etc/
sudo ls /etc/
blkid 
vim /etc/default/grub 
lspci -k
sudo gparted
cd /boot/
du -h
du -h .
sudo du -h .
ll
clear
powertop
sudo powertop
sudo powertop --auto-tune
powertop --auto-tune
dnf search efibootmaa
dnf search efibootmgr
udo dnf install efbootmgr
sudo dnf install efbootmgr
sudo dnf install efibootmgr
sudo dnf install linux-headers
nm-connection-editor 
nmcli device wifi list
xdg-settings 
xdg-screensaver 
xdg-screensaver lock
ll .config/user-dirs.
ll .config/user-dirs.dirs
cat .config/user-dirs.dirs
termite
sudo dnf install termite
shutdown -r now
cd .config/qtile/
ll
vim autostart.sh 
ll
top
vim .config/qtile/autostart.sh 
light-locker
xdg-screensaver 
xdg-screensaver activate
cd Documents/Projects/dotfiles/
vim .gitignore
neofetch 
pfetch
xdg-user-dirs
xdg-user-dir
xdg-user-dirs
sudo dnf install xdg-user-dirs
xdg-user-dirs-update 
ll
cat /bin/sh
ll
cd
l
ll
rome-wallp set
ll
echo $COLORTERM
exit
ll
rome-wallp set
ll
echo $COLORTERM
ll
dotfiles status
ll
cat .gitignore 
ll
mkdir .config/bash
ll
vim .profile
echo $TERM
echo $TERMINAL
echo $GTK2_RC_FILES 
rm ~/.local/share/nvim/swap/%home%jb%.profile.sw
rm ~/.local/share/nvim/swap/%home%jb%.profile.swp 
exit
echo $TERMINAL
echo $BONJOUR
exit
ll
cat .bash_profile 
rm .bash_profile 
ll
ll
vim .profile 
ll
vim .profile 
ll

:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: overview
:END:

#+title:   Configuration
#+author:
#+email:

* Configuration file headers

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; $DOOMDIR/config.org.
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+begin_src emacs-lisp :tangle init.el
;;; $DOOMDIR/init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; $DOOMDIR/config.org.
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; $DOOMDIR/config.org.
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

* My variables and overrides

Here I define the variables controlling my preferences, according to my system setup.

#+begin_src emacs-lisp
(defvar my/frame-transparency '(95 . 95))
;;(defvar my/default-font "Fira Code Retina")
;;(defvar my/default-font-size 125)

;; Moving the org directory to ~/Documents, keeping ~ clean.
(defvar my/org-directory (file-name-as-directory "~/Documents/org"))
(defvar my/org-agenda-directories '("~/Documents/org"))

;; Where my projects live
(defvar my/projects-root "~/Projects")
(defvar my/projects '("~/Documents/org" "~/Projects" "~/Projects/00_learning"))
#+end_src

* Doom modules

This code is tangled to ~init.el~ to select which modules to load. Straight copy of the default ~init.el~ with modules of choice on or off.

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)	; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;(ligatures +extra +fira)         ; ligatures and symbols to make your code pretty again
       ;;minimap            ; show a map of the code on the side
       modeline             ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash          ; blink cursor line after big motions
       ;;neotree            ; a project drawer, like NERDTree for vim
       ophints              ; highlight the region an operation acts on
       (popup +defaults)    ; tame sudden yet inevitable temporary windows
       (tabs +centaur)			; a tab bar for Emacs
       (treemacs +lsp)			; a project drawer, like neotree but cooler
       ;;unicode            ; extended unicode support for various languages
       vc-gutter            ; vcs diff in the fringe
       vi-tilde-fringe      ; fringe tildes to mark beyond EOB
       ;;window-select      ; visually switch windows
       workspaces           ; tab emulation, persistence & separate workspaces
       ;;zen                ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons +ranger)             ; making dired pretty [functional]
       ;; electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe) ; tasing you for every semicolon you forget
       (spell +flyspell +hunspell +everywhere) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       (elixir +lsp)            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)       ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
	+pretty
	+dragndrop)			; drag & drop files/images into org buffers
       ;;php               ; perl's insecure younger brother
       plantuml           ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)      ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)        ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       (scheme +mit +lsp)  ; a fully conniving family of lisps
       (sh +lsp)          ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Better Defaults
** Settings

A curated list of default settings.

[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#use-better-defaults]
[https://github.com/tecosaur/emacs-config/blob/master/config.org#better-defaults]

#+begin_src emacs-lisp
(setq-default
 indent-tabs-mode t									; Use tabs to indent
 tab-width 2													; Set width for tabs
 cursor-in-non-selected-windows nil	; Hide the cursor in inactive windows
 cursor-type '(hbar . 2)							; Underline-shaped cursor
 custom-unlispify-menu-entries nil		; Prefer kebab-case for titles
 custom-unlispify-tag-names nil			; Prefer kebab-case for symbols
 delete-by-moving-to-trash t					; Delete files to trash
 fill-column 80											; Set width for automatic line breaks
 gc-cons-threshold (* 8 1024 1024)		; We're not using Game Boys anymore
 help-window-select t								; Focus new help windows when opened
 uniquify-buffer-name-style 'forward	; Uniquify buffer names
 window-combination-resize t					; Resize windows proportionally
 x-stretch-cursor t									; Stretch cursor to the glyph width
 delete-by-moving-to-trash t)				; Delete files to trash

(setq
 undo-limit 80000000									; Raise undo-limit to 80 Mb
 evil-want-fine-undo t								; By default while in insert all changes are one big blob. Be more granular.
 auto-save-default t									; Auto... save...
 auto-save-list-file-prefix nil			; Prevent tracking for auto-saves
 truncate-string-ellipsis "â€¦")				; Nice ellipsis

(blink-cursor-mode 0)								; Prefer a still cursor
(fset 'yes-or-no-p 'y-or-n-p)				; Replace yes/no prompts with y/n
(global-subword-mode 1)							; Iterate through CamelCase words
(set-default-coding-systems 'utf-8)	; Default to utf-8 encoding

(global-subword-mode 1)							; Iterate through CamelCase words

;; (unless (string-match-p "^Power N/A" (battery))   ; On laptops...
;;   (display-battery-mode 1))                       ; it's nice to know how much power you have
#+end_src

** Auto-customizations

By default, changes made via a customisation interface are added to init.el. All should be driven by files.

#+begin_src emacs-lisp
(setq-default custom-file null-device)
#+end_src

** Garbage collection

=garbage-collect= on focus-out, Emacs should feel snappier overall.

#+begin_src emacs-lisp
(add-function
 :after after-focus-change-function
 (defun my/garbage-collect-maybe ()
   (unless (frame-focus-state) (garbage-collect))))
#+end_src

** Windows

Prefer splitting below and to the right.

#+begin_src emacs-lisp
(after! evil
  (setq
   evil-vsplit-window-right t
   evil-split-window-below t))
#+end_src

Ask which buffer to display when splitting windows.

#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

** Dashboard

Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp :tangle packages.el
;; (package! dashboard)
#+end_src

#+begin_src emacs-lisp
;; (use-package! dashboard
;;   :init
;;   (setq dashboard-items '(
;;         (recents . 5)
;;         (agenda . 5)
;;         )))
#+end_src

** ESC to cancel them all

Make ESC quit prompts.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* User Interface Configuration

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 16)
      ;;doom-unicode-font (font-spec :family "JuliaMono")
      ;;doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
      )

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-palenight)
#+end_src

#+begin_src emacs-lisp
(setq visible-bell t)	; Set up the visible bell
(column-number-mode t)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
#+end_src

Sets transparency upon new frame creation for =emacsclient -nc= use case.

#+begin_src emacs-lisp
(defun my/set-frame-transparency (frame)
  (set-frame-parameter frame 'alpha my/frame-transparency))

(add-to-list 'after-make-frame-functions #'my/set-frame-transparency)
(my/set-frame-transparency (selected-frame))
#+end_src

* Packages
** Projectile

#+begin_src emacs-lisp
(use-package! projectile
  :defer t
  :config
  (setq
   projectile-project-search-path my/projects
   projectile-sort-order 'access-time)
  :custom
  (projectile-enable-caching nil)
  )

(after! projectile
  (projectile-discover-projects-in-directory my/projects-root)
  (projectile-discover-projects-in-directory my/org-directory))
#+end_src

** Rainbow Mode

#+begin_quote
This minor mode sets background color to strings that match color names, e.g. #0000ff is displayed in white with a blue background.
#+end_quote

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! rainbow-mode
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

* Org Mode

#+begin_quote
A GNU Emacs major mode for keeping notes, authoring documents, computational notebooks, literate programming, maintaining to-do lists, planning projects, and more â€” in a fast and effective plain text system.
#+end_quote

[https://orgmode.org/]

Originally written by Carsten Dominik, Org-Mode is distributed as part of Emacs.

My setup is *heavily* inspired by the amazingly detailed [[http://doc.norang.ca/org-mode.html][Guide by Bernt Hansen]] - along with other sources listed below.

[https://tecosaur.github.io/emacs-config/config.html]
[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#org-mode]
[https://github.com/daviwil/dotfiles/blob/master/Workflow.org]

** Getting Started
*** System Configuration
**** Mime types

Org mode is not recognised by default. To change this, add the following XML to ~$HOME/.local/share/mime/packages/org.xml~ (or ~/usr/share/mime/packages/org.xml~ for system wide changes).

#+begin_src xml :noweb-ref none :tangle ~/.local/share/mime/packages/org.xml
<?xml version="1.0" encoding="utf-8"?>
<mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>
  <mime-type type="text/org">
    <comment>Emacs Org-mode File</comment>
    <glob pattern="*.org"/>
    <alias type="text/org"/>
  </mime-type>
</mime-info>
#+end_src

Refresh mime database and set Emacs as the default editor.

#+begin_src shell :tangle no
update-mime-database ~/.local/share/mime
xdg-mime default emacs.desktop text/org
#+end_src

**** Org Capture & bspwm

~bspwm~ rules do not allow/work with '-' in the window name, hence renaming the org-capture frame from ~doom-capture~ to 'capture' so custom rules can target it.

#+begin_src emacs-lisp
(setcdr (assq `name +org-capture-frame-parameters) "capture")
#+end_src

*** Org-Mode & Agenda Setup

Org-Mode package is loaded in the Doom modules section, here I just set some preferences.

#+begin_src emacs-lisp
(setq org-directory my/org-directory)

(after! org
  (setq
   org-startup-folded 'overview
   org-src-tab-acts-natively t
   org-ellipsis " â–¼ "
   org-priority-default ?C
   org-catch-invisible-edits 'smart
   org-agenda-start-with-log-mode t
   org-log-done 'time
   org-log-into-drawer t
   org-agenda-files my/org-agenda-directories
   )
  )
#+end_src

I set =org-agenda-files= to an explicit list of directories, so the agenda can pick up all ~.org~ files within them.

org-mode manages the =org-agenda-files= variable using ~C-c [~ and ~C-c ]~ to add and remove files. To avoid them messing up the list of directories, I remove the bindings and the functions.

#+begin_src emacs-lisp
(after! org
  (map!
   :map org-mode-map
   "C-c [" nil
   "C-c ]" nil)
  (defun org-agenda-file-to-front nil)
  (defun org-remove-file nil)
  )
#+end_src
*** My Org Files

The mainstay files are the following:

| Filename    | Description                                 |
|-------------+---------------------------------------------|
| todo.org    | Personal tasks and things to keep track of. |
| refile.org  | Capture task bucket, to be sorted later.    |
| journal.org | Attempt at writing daily stuff.             |

Dedicated files for a topic/event/project are created when needed.

**** todo.org structure

- Special Dates
  - Birthdays
  - Anniversaries
  - Holidays
- Health
- Notes
- Tasks
- Other

#+begin_src org :tangle no
,* Special Dates
,:PROPERTIES:
,:CATEGORY: Special Dates
,:END:
...
,* Health
,:PROPERTIES:
,:CATEGORY: Health
,:END:
#+end_src

** Task and States
*** Keywords

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
	  (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANCEL(k@/!)")
	  ))
  )
#+end_src

Re-using existing colour scheme for custom tasks: this will keep in line with the selected theme.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keyword-faces
	'(("NEXT" +org-todo-active)
	  ("WAIT" +org-todo-onhold)
	  ("HOLD" +org-todo-onhold)
	  ("CANCEL" +org-todo-cancel)
	  ))
  )
#+end_src

*** State triggers

The following triggers automatically assign tags to tasks based on state changes. The tags allow to filter tags in agenda view.

- Moving a task to CANCEL adds a CANCELLED tag
- Moving a task to WAIT adds a WAITING tag
- Moving a task to HOLD adds WAITING and HOLDING tags
- Moving a task to a done state removes WAITING and HOLDING tags
- Moving a task to TODO removes WAITING, CANCELLED and HOLDING tags
- Moving a task to NEXT removes WAITING, CANCELLED and HOLDING tags
- Moving a task to DONE removes WAITING, CANCELLED and HOLDING tags

#+begin_src emacs-lisp
(after! org
  (setq org-todo-state-tags-triggers
	(quote (("CANCEL" ("CANCELLED" . t))
		("WAIT" ("WAITING" . t))
		("HOLD" ("WAITING") ("HOLDING" . t))
		(done ("WAITING") ("HOLDING"))
		("TODO" ("WAITING") ("CANCELLED") ("HOLDING"))
		("NEXT" ("WAITING") ("CANCELLED") ("HOLDING"))
		("DONE" ("WAITING") ("CANCELLED") ("HOLDING")))))
  )
#+end_src

** Org Capture
*** Capture templates

A newly added task falls into one of these categories:
- A new to do task (t)
- A new note (n)
- A new journal entry (j)

#+begin_src emacs-lisp
(after! org-capture
  (setq org-default-notes-file +org-capture-todo-file)

  (setq org-capture-templates
	'(("t" "Personal todo" entry
	   (file+headline +org-capture-todo-file "Inbox")
	   "* TODO %?\n%U\n%i\n%a" :prepend t)
	  ("n" "Personal notes" entry
	   (file+headline +org-capture-notes-file "Inbox")
	   "* %u %? :NOTE: \n%i\n%a" :prepend t)
	  ("j" "Journal" entry
	   (file+olp+datetree +org-capture-journal-file)
	   "* %U %?\n%i\n%a" :prepend t)
	  ))
  )
#+end_src

*** Dedicated file for tasks

To keep things simple, org-capture puts all tasks in one file and refiled at a later time.

#+begin_src emacs-lisp
(setq +org-capture-todo-file "refile.org")
(setq +org-capture-notes-file "refile.org")
#+end_src

The file has a single permanent line at the top:

#+begin_src org :tangle no
,#+FILETAGS: REFILE
#+end_src

** Refiling Tasks
*** Refile Setup

To refile tasks in org you need to tell it where you want to refile things.

#+begin_src emacs-lisp
(after! org
  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets
        '((nil :maxlevel . 9)
          (org-agenda-files :maxlevel . 9)))

  ;; Use full outline paths for refile targets - we file directly with completion tool
  (setq org-refile-use-outline-path t)

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))

  ;; Add timestamp when an entry is refiled
  (setq org-log-refile t)

;;;; Refile settings
  ;; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
  )
#+end_src

*** Refiling Tasks

To bulk refile, mark the tasks with =m= and then =x r= to put them in a new location.

** Org Agenda

[https://github.com/alphapapa/org-super-agenda]

#+begin_src emacs-lisp :tangle packages.el
(package! org-super-agenda)
#+end_src

#+begin_src emacs-lisp
(use-package! org-super-agenda :commands org-super-agenda-mode)

(after! org-agenda
  (org-super-agenda-mode)

  (setq
   org-agenda-skip-scheduled-if-done t
   mrg-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-block-separator t
   ;; org-agenda-tags-column 100 ;; from testing this seems to be a good value
   org-agenda-compact-blocks t)

  (setq org-agenda-custom-commands
        '(("N" "Notes" tags "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t)))
          ("n" "Agenda and all TODOs"
           ((agenda "" nil)
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Next to do"
                             :todo "NEXT"
                             :order 1)
                            (:name "Overdue"
                             :deadline past
                             :face error
                             :order 2)
                            (:name "Due Today"
                             :deadline today
                             :order 3)
                            (:name "Important"
                             :tag "IMPORTANT"
                             :priority "A"
                             :order 6)
                            (:name "Tasks to refile"
                             :tag "REFILE"
                             :order 8)
                            (:name "Tasks"
                             :not (:tag ("PROJECT" "project" "REFILE"))
                             :order 9)
                            (:name "Projects"
                             :children t
                             :tag ("PROJECT" "project")
                             :order 10)
                            (:name "Due Soon"
                             :deadline future
                             :order 18)))))))))
  )
#+end_src

** Babel Languages

~Babel~ is Org-mode's ability to execute source code within Org-mode documents.

[https://orgmode.org/worg/org-contrib/babel/index.html]

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages '(
             (emacs-lisp . t)
             (scheme . t)
             )))
#+end_src

** Structure Templates

/With just a few keystrokes, it is possible to insert empty structural blocks, such as â€˜#+BEGIN_SRCâ€™ â€¦ â€˜#+END_SRCâ€™, or to wrap existing text in such a block./

[https://orgmode.org/manual/Structure-Templates.html]

Structure templates allow to quickly insert code blocks in Org files with =<= followed by the template name and then press TAB (provided by org-tempo), for example =<el= will create an Emacs lisp source block as per configuration below.

Add block templates with the function below: the first argument is the template name, the second is the language as known by Org Babel.

#+begin_src emacs-lisp
(after! org
  (defun my/org-add-structure-template (alias language)
    (add-to-list 'org-structure-template-alist `(,alias . ,(format "src %s" language))))
  )

(use-package! org-tempo
  :after org
  :init
  (my/org-add-structure-template "sh" "shell")
  (my/org-add-structure-template "el" "emacs-lisp")
  (my/org-add-structure-template "py" "python")
  (my/org-add-structure-template "sc" "scheme")
  (my/org-add-structure-template "json" "json")
  (my/org-add-structure-template "xml" "xml")
  (my/org-add-structure-template "yaml" "yaml"))
#+end_src

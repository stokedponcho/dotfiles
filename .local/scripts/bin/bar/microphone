#!/bin/bash

# Script to show/control microphone on polybar:
#
# [module/microphone]
# type = custom/script
# tail = true
# exec = microphone listen
# click-left = microphone toggle
# scroll-up = microphone up
# scroll-up = microphone down
#
# Credits to
# https://github.com/arcolinux/arcolinux-polybar/blob/master/etc/skel/.config/polybar/scripts/pavolume.sh
# https://github.com/marioortizmanero/polybar-pulseaudio-control
#

COLOR_MUTED="#999"
STEP="1"

defaultSource=$(pactl info | grep "Default Source" | cut -f3 -d" ")

output() {
	volume=$(pacmd list-sources | grep -A 10 $defaultSource | awk -e '/volume/{ print $5 }' | head -n 1)
	muted=$(pacmd list-sources | grep -A 10 $defaultSource | awk '/muted/{ print $2 }')

  if [ $muted = "yes" ]; then
    echo "%{F$COLOR_MUTED} $volume%{F-}"
  else
    echo " $volume"
  fi
}

toggle() {
	pactl set-source-mute $defaultSource toggle
}

up() {
  pactl set-source-volume $defaultSource "+$STEP%"
}

down() {
  pactl set-source-volume $defaultSource "-$STEP%"
}

listen() {
    local firstRun=0

    # Listen for changes and immediately create new output for the bar.
    # This is faster than having the script on an interval.
    pactl subscribe 2>/dev/null | {
        while true; do
            {
                # If this is the first time just continue and print the current
                # state. Otherwise wait for events. This is to prevent the
                # module being empty until an event occurs.
                if [ $firstRun -eq 0 ]; then
                    firstRun=1
                else
                    read -r event || break
                    # Avoid double events
										if ! echo "$event" | grep -e "on card" -e "on source" -e "on server"; then
												continue
										fi
                fi
            } >/dev/null 2>&1
            output
        done
    }
}

while [[ "$1" == --* ]]; do
  unset arg
  unset val

  arg="${1//=*/}"
  val="${1//*=/}"
  shift

  case "$arg" in
    --color-muted)
      COLOR_MUTED="$val"
      ;;
  esac
done

case "$1" in
    toggle)
        toggle
        ;;
    up)
        up
        ;;
    down)
        down
        ;;
    listen)
        # Listen for changes and immediately create new output for the bar
        # This is faster than having the script on an interval
        listen
        ;;
    *)
        # By default print output for bar
        output
        ;;
esac
